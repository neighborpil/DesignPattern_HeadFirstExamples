package com;

import com.Flyable.FlyBehavior;
import com.Quackable.QuackBehavior;
/*
[Strategy Pattern]
 - 알고리즘군을 정의하고 각각을 캡슐화하여 교환해서 사용 할 수 있도록 한다
 - 알고리즘을 사용하는 클라이언트와는 독립적으로 알고리즘을 변경 할 수 있다
*/
public abstract class Duck {
	
	FlyBehavior flyBehavior;
	QuackBehavior quackBehavior;
	
	public Duck(){
		//Empty
	}
	
	public abstract void display();

	public void swin(){
		System.out.println("모든 오리는 물에 뜹니다. 가짜 오리도 뜨죠");
	}
	
	//행동 클래스에 위임
	public void performFly()
	{
		flyBehavior.fly();
	}
	
	//행동 클래스에 위임
	public void performQuack()
	{
		quackBehavior.quack();
	}
	
	//오리의 행동(날기)을 즉석에서 바꿀 때 사용
	public void setFlyBehavior(FlyBehavior fb){
		flyBehavior = fb;
	}

	//오리의 행동(꽥)을 즉석에서 바꿀 때 사용
	public void setQuackBehavior(QuackBehavior qb){
		quackBehavior = qb;
	}
}
